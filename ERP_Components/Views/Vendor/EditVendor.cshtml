@using ERP_Component_DAL.Models;




@model AddVendor
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Vendor Management Form</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #e0e0e0;
            margin: 0;
            padding: 0;
        }

        .container {
            /* width: 95%; */
            max-width: 1400px;
            margin: 30px auto;
            background-color: #fff;
            /* padding: 40px; */
            border-radius: 15px;
            /* box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); */
        }


        h3 {
            padding: 13px 15px;
            color: #ad4b4b;
            font-size: 1.5rem;
            /* border-radius: 6px; */
        }

        /* Form rows and layout */
        .row {
            display: flex;
            gap: 20px;
            /* margin-bottom: 20px; */
            flex-wrap: wrap;
        }

        /* Input field block */
        .field {
            flex: 1 1 30%;
            min-width: 280px;
            display: flex;
            flex-direction: column;
            margin-bottom: 10px;
            margin: 20px 0 12px 12px;
        }

        /* Labels */
        label {
            font-weight: 500;
            color: #333;
            display: block;
            margin: 2px 0.6px;
            font-size: 15px;
        }

        /* Inputs and selects */
        input[type="text"],
        input[type="date"],
        input[type="number"],
        select {
            width: 100%;
            padding: 10px 12px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 15px;
            box-sizing: border-box;
            background-color: #fff;
            transition: border 0.3s ease;
        }

        input, select {
            width: 300px !important;
            height: 38px;
        }

        #vendorDropdown {
            margin-right: 26rem;
            position: absolute;
            right: 274px;
            width: 200px;
            height: 100px;
        }

        input:focus,
        select:focus {
            outline: none;
            border: 1.5px solid #ad4b4b;
            box-shadow: 0 0 3px rgba(173, 75, 75, 0.3);
        }

        .btn {
            display: flex;
            justify-content: end;
            align-items: center;
            margin-right: 7rem;
        }

        button {
            background-color: #ad4b4b;
            color: white;
            padding: 10px 18px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            margin-top: 1.5rem;
        }

            button:hover {
                background-color: white;
                color: #ad4b4b;
                border: 1px solid #ad4b4b;
            }



        .personal {
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            padding: 7px 13px 7px 14px;
            width: 77rem;
            max-width: 1320px
        }


        .container2 {
            box-shadow: 0 5px 22px rgba(0, 0, 0, 0.1);
        }

        #otherVendorTypeGroup {
            margin-left: 28rem;
        }
    </style>

</head>
<body>
    <div class="container2"></div>
    <div class="container">
        <form id="vendorForm" onsubmit="return validateForm()" asp-action="EditVendor" asp-controller="Home">

            <h3>Personal Details</h3>
            <div class="personal">
                <div class="row">
                    <div class="field">
                        <label for="gst">GST No</label>
                        <input type="text" id="gst" name="GSTNo" maxlength="16" value="@Model.GST">
                    </div>
                    <div class="field">
                        <label for="pan">PAN No</label>
                        <input type="text" id="pan" name="PANNo" maxlength="10" value="@Model.PAN">
                    </div>
                    <div class="field">
                        <label for="vendorName">Vendor Name</label>
                        <input type="text" id="vendorName" name="VendorName" required value="@Model.VendorName">
                    </div>
                </div>

                <div class="row">
                    <div class="field">
                        <label for="vendorCode">Vendor Code</label>
                        <input type="text" id="vendorCode" name="VendorCode" required value="@Model.VendorCode">
                    </div>
                    <div class="field">
                        <label for="contactPerson">Contact Person</label>
                        <input type="text" id="contactPerson" name="ContactPerson" required value="@Model.ContactName">
                    </div>
                    <div class="field">
                        <label for="contactNo">Contact Number</label>
                        <input type="text" id="contactNo" name="ContactNo" required value="@Model.Phone">
                    </div>
                </div>

                <div class="row">
                    <div class="field">
                        <label for="paymentTerms">Payment Terms (Days)</label>
                        <input type="number" id="paymentTerms" name="PaymentTerms" value="@Model.PaymentTermsDays">
                    </div>
                    <div class="field" id="vendorDropdown">
                        <label for="VendorType">Vendor Type</label>
                        <select class="VendorType" name="VendorType">
                            <option value="">-- Select Vendor Type --</option>
                            <option value="Farmer">Farmer</option>
                            <option value="Shopkeeper">Shopkeeper</option>
                            <option value="Wholesaler">Wholesaler</option>
                            <option value="Retailer">Retailer</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="field" id="otherVendorTypeGroup" style="display: none;">
                        <label for="OtherVendorType">Please specify</label>
                        <input type="text" id="OtherVendorType" name="OtherVendorType" />
                    </div>
                </div>
            </div>
            <h3>Opening Balance</h3>
            <div class="personal">
                <div class="row">
                    <div class="field">
                        <label for="date">Date(As On)</label>
                        <input type="date" id="date" name="OpeningDate">
                    </div>
                    <div class="field">
                        <label for="amount">Amount</label>
                        <input type="text" id="amount" name="Amount" value="@Model.Balance">
                    </div>
                    <div class="field" id="modeRow">
                        <label for="mode">Mode</label>
                        <select id="mode" name="Mode">
                            <option selected disabled>-Select-</option>
                            <option value="Credit">Credit</option>
                            <option value="Debit">Debit</option>
                        </select>
                    </div>
                </div>
            </div>
            <h3>Address Details</h3>
            <div class="personal">
                <div class="row">
                    <div class="field">
                        <label for="address">Address</label>
                        <input type="text" id="address" name="Address" required value="@Model.AddressLine">
                    </div>
                    <div class="field">
                        <label for="country">Country</label>
                        <select id="country" name="Country" required>
                            <option selected disabled>-Select-</option>
                            <option value="India">India</option>
                        </select>
                    </div>
                    <div class="field">
                        <label for="state">State</label>
                        <select id="state" name="State" required></select>
                    </div>
                </div>

                <div class="row">
                    <div class="field">
                        <label for="district">District</label>
                        <select id="district" name="District" required></select>
                    </div>
                    <div class="field">
                        <label for="city">Area</label>
                        <input type="text" id="city" name="Area" value="@Model.City" />
                    </div>
                    <div class="field">
                        <label for="pin">Pin Code</label>
                        <input type="text" id="pin" name="PinCode" required value="@Model.Pincode">
                    </div>
                </div>
            </div>
            <h3>Bank Details</h3>
            <div class="personal">
                <div class="row">
                    <div class="field">
                        <label for="accountHolder">Account Holder Name</label>
                        <input type="text" id="accountHolder" name="AccountHolder" required value="@Model.AccountHolderName">
                    </div>
                    <div class="field">
                        <label for="bankName">Bank Name</label>
                        <input type="text" id="bankName" name="BankName" required value="@Model.BankName">
                    </div>
                    <div class="field">
                        <label for="branchName">Branch Name</label>
                        <input type="text" id="branchName" name="BranchName" value="@Model.BranchName">
                    </div>
                </div>

                <div class="row">
                    <div class="field">
                        <label for="accountNo">Account Number</label>
                        <input type="text" id="accountNo" name="AccountNo" required value="@Model.AccountNumber">
                    </div>
                    <div class="field">
                        <label for="reconfirm">Re-confirm Account Number</label>
                        <input type="text" id="reconfirm" name="reconfirm" required>

                    </div>
                    <div class="field">
                        <label for="ifsc">IFSC</label>
                        <input type="text" id="ifsc" name="IFSC" required value="@Model.IFSCCode">
                    </div>
                </div>
            </div>
            <div class="btn">
                <button type="submit">Submit</button>
            </div>
        </form>
    </div>
</body>
</html>
<script>
    document.getElementById("vendorTypeDropdown").addEventListener("change", function () {
        var selected = this.value;
        var otherInput = document.getElementById("otherVendorTypeGroup");
        if (selected === "Other") {
            otherInput.style.display = "block";
        } else {
            otherInput.style.display = "none";
            document.getElementById("OtherVendorType").value = "";
        }
    });

    function validateForm() {
        const gst = document.getElementById('gst').value.trim();
        const pan = document.getElementById('pan').value.trim();
        const accountNo = document.getElementById('accountNo').value.trim();
        const reconfirm = document.getElementById('reconfirm').value.trim();

        if (gst === "" && pan === "") {
            alert("Please enter either GST No or PAN No.");
            return false;
        }

        if (accountNo !== reconfirm) {
            alert("Account Number and Re-confirm Account Number do not match.");
            return false;
        }


        if (accountNo !== reconfirm) {
            alert("Account Number and Re-confirm Account Number do not match.");
            return false;
        }

        return true;
    }


</script>
<script>
    let statesData = null;

    async function fetchData(url) {
        try {
            const response = await fetch(url);
            statesData = await response.json();
            console.log("Fetched data:", statesData);
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    }

    async function populateStates() {
        console.log("Populating states...");
        await fetchData("/Json/city.json");

        const stateSelect = document.getElementById("state");
        if (statesData && statesData.states) {
            statesData.states.forEach((state) => {
                let option = new Option(state.name, state.name);
                stateSelect.add(option);
            });
        }
    }




    async function updateDistricts() {
        const stateName = document.getElementById("state").value;
        const districtSelect = document.getElementById("district");
        districtSelect.innerHTML = '<option value="">-Select District-</option>';

        if (!stateName) return;

        const selectedState = statesData.states.find(state => state.name === stateName);
        if (selectedState && selectedState.districts) {
            selectedState.districts.forEach((district) => {
                let option = new Option(district.name, district.name);
                districtSelect.add(option);
            });
        }
    }



    async function updateCities() {
        const stateName = document.getElementById("state").value;
        const districtName = document.getElementById("district").value;
        const citySelect = document.getElementById("city");

        citySelect.innerHTML = '<option value="">-Select City-</option>';

        if (!stateName || !districtName) return;

        const selectedState = statesData.states.find(state => state.name === stateName);
        const selectedDistrict = selectedState.districts.find(district => district.name === districtName);

        if (selectedDistrict && selectedDistrict.cities) {
            selectedDistrict.cities.forEach(city => {
                let option = new Option(city, city);
                citySelect.add(option);
            });
        }

        citySelect.add(new Option("Other", "other"));
    }




    function checkOtherCity(select) {
        if (select.value === "other") {
            document.getElementById("cityModal").style.display = "flex";
            select.value = "";
        }
    }

    function closeCityModal() {
        document.getElementById("cityModal").style.display = "none";
        document.getElementById("newCity").value = "";
    }

    document.getElementById("state").addEventListener("change", updateDistricts);
    document.getElementById("district").addEventListener("change", updateCities);


    window.onload = populateStates;
</script>

<script>
    async function addNewCity() {
        const newCity = document.getElementById("newCity").value.trim();
        const stateName = document.getElementById("state").value;
        const districtName = document.getElementById("district").value;

        if (!newCity || stateName === "" || districtName === "") {
            alert("Please enter a valid city name and select a state and district.");
            return;
        }

        const requestData = {
            StateName: stateName,
            DistrictName: districtName,
            NewCity: newCity
        };

        console.log("Sending Request:", requestData);

        try {
            const response = await fetch("/Benifitiary/AddCity", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestData)
            });

            if (!response.ok) {
                throw new Error("Failed to add city");
            }

            const result = await response.json();
            console.log("Response Data:", result);

            if (result.success) {
                alert("City added successfully!");

                // Add new city to the dropdown
                const citySelect = document.getElementById("city");
                let newOption = new Option(newCity, newCity);
                citySelect.add(newOption);

                closeCityModal();
            } else {
                alert("Error adding city: " + result.message);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Something went wrong!");
        }
    }

</script>



