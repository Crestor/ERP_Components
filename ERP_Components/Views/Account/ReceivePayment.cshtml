@using ERP_Component_DAL.Models

@{
    ViewBag.Title = "Receive Payment";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
}
<link rel="stylesheet" href="~/css/Product.css" />
@model ReceivePayment
<style>

</style>
<div class="form-section">
    <h3>Receive Details</h3>
    <div class="form-row" style="width:50%">
       @*  <label for="date">Date</label>
        <input type="date" id="date" name="date" required /> *@
    </div>
    <div class="form-row">
        <label for="customerName">Customer Name</label>
        <select name="CustomerID" id="CustomerID" onchange="getOutstandingPaymentBalance(); show();">
            <option selected disabled>select</option>
            @if(ViewBag.CustomerID != null)
            {
                <option selected value="@ViewBag.CustomerID">@ViewBag.CustomerName</option>

            }else{
            @foreach (var customer in Model.CustomerNameList)
            {
                <option value="@customer.CustomerID">@customer.CustomerName</option>
            }
            }
        </select>

        @* <label for="project">Project :</label>
        <input type="text" id="project" name="project" required /> *@
    </div>
</div>
<div id="outstanding" style="width:100%; display:none;">

    <h2>Outstanding Summary</h2>
    <div class="table">
       <table>
            <thead>
                <tr>
                    <th>Particular</th>
                    <th>Debited</th>
                    <th>Credited</th>
                </tr>
            </thead>
            <tbody>
                <tr><td>Amount Paid in advance:</td><td>0</td><td></td></tr>
                <tr><td>Outstanding Invoice Amount:</td><td>0</td><td>0</td></tr>
                <tr><td>Debit Note Amount:</td><td>0</td><td>0</td></tr>
                <tr><td>Credit Note Amount:</td><td>0</td><td>0</td></tr>
                <tr><td>Unsettled Additional charges</td><td>0</td><td>0</td></tr>
                <tr><td>Total Amount</td><td></td><td></td></tr>
            </tbody>
        </table> 



    </div> 
     <div id="oBlanceContent" class="alert alert-warning mt-3 " style="margin-bottom: 7px;">
        <i class="fas fa-exclamation-circle"></i>

        You have outstanding receive payment of ₹ <span id="balance"></span>. Settle bill?
        <input type="radio" name="settleOption" value="yes" onclick="AmountSummaryOfCustomer(); paymentsettle();" /> Yes
        <input type="radio" name="settleOption" value="no" onclick="advancepayment();" /> No
    </div>


  

    <div id="bill" style="display:none;" class="form-section">
        <div style="display:flex; justify-content:space-between; margin-left:25px;">
            <div class="label">
                <label for="paymentReleased">Payment Receive</label>
                <input type="number" id="paymentReleased" name="paymentReleased" oninput="paymentrelease()" required />
            </div>
            <div>
               @*  <p> Payment to be made: <input type="text" readonly /></p>
                <p> Amount of payment: <input type="text" readonly /></p>
                <p> Journal Amount: <input type="text" readonly /></p>
        
                <p> Amount In Hand: <input type="text" id="debitedTotal" readonly /></p> *@

               
                    <p> Payment to be made: ₹ <span id="paymentToBeMade">0.00</span></p>
                    <p> Amount of payment: ₹ <span id="amountOfPayment">0.00</span></p>
                    <p> Journal Amount: ₹ <span id="journalAmount">0.00</span></p>
                    <p> Amount In Hand: ₹ <span id="debitedTotal">0.00</span></p>
        

       

                
            </div>
        </div>

        <h2>Invoice of Settlement</h2>
        <div class="table">
            <table id="dataTable">
                <thead>
                    <tr>
                        <th>S.No</th>
                        <th>Invoice Number</th>
                        <th>GrossTotal</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        @* <input type="hidden" id="QuotationID" name="QuotationID" value="@Model.QuotationID" /> *@
    </div>
</div>



<div id="Advancepayment" style="display:none;width:100%;padding: 1%;margin: auto;background-color:#e8f9fc;" class="alert alert-warning mt-3">

    <label id="pendingpayment" class="required fas fa-exclamation-circle">Do you want to add advance amount to this customer?</label>
    <input type="radio" name="advanceOption" value="yes" onclick="CustomerPaymentDetails();paymentbill()" /> Yes
    <input type="radio" name="advanceOption" value="no" /> No
</div>

<div id="paymenttable" style="display:none; width:95%; margin-left:25px;" class="form-section">
    <div style="display:flex; justify-content:space-between; margin-bottom:25px;">
       
        <div class="label">
            <label>Payment Reference</label>
            <input type="text" id="paymentRef" name="paymentRef" required />
        </div>
        <div class="label">
            <label>Payment Amount</label>
            <input type="number" id="advancePayment" name="AdvancePayment" required />
        </div>
     
    </div>

    <h2>Payment Details</h2>
    <div class="table">
        <table>
            <thead>
                <tr>
                    <th>S.No</th>
                    <th>Invoice Number</th>
                    <th>Total Amount</th>
                    <th>Advance Amount</th>
                    @* <th>Invoice Id</th> *@
                    <th>Status</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


 <script>
       function ScrollToElementById(id) {
        const targetElement = document.getElementById(id);
        if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    }
    //     function paymentrelease() {
    //     $('#debitedTotal').val($('#paymentReleased').val());
    // }
        function paymentrelease() {
        const paymentReleased = $('#paymentReleased').val();
        $('#debitedTotal').text(paymentReleased || '0.00');
    }


    function show() {
        $('#outstanding').show();
        ScrollToElementById("oBlanceContent");
    }

    function paymentsettle() {
        $('#bill').show();
        ScrollToElementById("bill");
    }

    function paymentbill() {
        $('#paymenttable').show();
             ScrollToElementById("paymenttable");
    }

    function advancepayment() {
        $('#Advancepayment').show();
        $('#bill').hide();
             ScrollToElementById("Advancepayment");
    }

    $(document).ready(function () {

        var CustomerName = '@ViewBag.CustomerName';
    if(CustomerName != null && CustomerName!=""){
       getOutstandingPaymentBalance(); 
       show();
    }

    });

    let currentBalance = 0;

    function getOutstandingPaymentBalance() {
        const CustomerID = $('#CustomerID').val();
        if (CustomerID) {
            $.ajax({
                url: '/Account/OutstandingPaymentBalance',
                type: 'GET',
                data: { CustomerID },
                success: function (data) {
                    // $('#balance').val(data.balance); //this will when the value on in input tags
                   $('#balance').text(data.balance); // .text used when u wanna show it as text like p and so on

                    currentBalance = parseFloat(data.balance);
                },
                error: function () {
                    alert('Error retrieving pending amount.');
                }
            });
        }
    }
    // ------------/
        function AmountSummaryOfCustomer() {
        const CustomerID = $('#CustomerID').val();
        if (!CustomerID) return;

        $.ajax({
            url: '/Account/AmountSummaryOfCustomer',
            type: 'GET',
            data: { CustomerID },
            success: function (response) {
                const tableBody = $('#dataTable tbody');
                tableBody.empty();

                const items = response.listItems || response || [];

                if (!items.length) {
                    tableBody.append("<tr><td colspan='5'>No data found</td></tr>");
                    $('#amountOfPayment').text('0.00');
                    $('#paymentToBeMade').text('0.00');
                    $('#journalAmount').text('0.00');
                    return;
                }

                let totalGrossAmount = 0;

                items.forEach((item, index) => {
                    const grossTotal = parseFloat(item.grossTotal);
                    const isDisabled = grossTotal === 0 ? 'disabled' : '';
                    totalGrossAmount += grossTotal;

                    const row = $(`
                        <tr data-quotationid="${item.quotationID}">
                            <td>${index + 1}</td>
                            <td>${item.invoiceNumber}</td>
                            <td class="gross">${grossTotal.toFixed(2)}</td>
                            <td class="status">
                                <button class="status-btn btn btn-sm" style="background-color: #138496; color: white;" ${isDisabled}
                                    data-gross="${grossTotal}"
                                    data-invoice="${item.invoiceNumber}"
                                    data-quotationid="${item.quotationID}">
                                    Pay
                                </button>
                            </td>
                        </tr>
                    `);
                    tableBody.append(row);
                });

                $('#amountOfPayment').text(totalGrossAmount.toFixed(2));
                $('#paymentToBeMade').text(totalGrossAmount.toFixed(2));
                $('#journalAmount').text(totalGrossAmount.toFixed(2));

                $('.status-btn').off('click').on('click', function () {
                    const $btn = $(this);
                    const originalGross = parseFloat($btn.data('gross'));
                    const quotationID = $btn.data('quotationid');
                    const CustomerID = $('#CustomerID').val();
                    let paymentInput = parseFloat($('#paymentReleased').val()) || 0;

                    if (paymentInput <= 0) {
                        alert("Please enter a valid payment amount.");
                        return;
                    }

                    function FullPaid() {
                        Swal.fire({
                            title: "Amount submitted successfully",
                            icon: "success",
                            confirmButtonText: "OK",
                            confirmButtonColor: "#138496"
                        });
                    }

                    function PartialPaid() {
                        Swal.fire({
                            title: "Partial Amount submitted successfully",
                            icon: "success",
                            confirmButtonText: "OK",
                            confirmButtonColor: "#138496"
                        });
                    }

                    let amountToPay = 0;
                    let newGrossTotal = 0;
                    let statusLabel = "";
                    let sendOldGrossTotal = 0;

                    if (paymentInput >= originalGross) {
                        amountToPay = originalGross;
                        sendOldGrossTotal = originalGross;
                        newGrossTotal = 0;
                        statusLabel = "Paid";
                        FullPaid();
                    } else {
                        amountToPay = paymentInput;
                        sendOldGrossTotal = amountToPay;
                        newGrossTotal = originalGross - amountToPay;
                        statusLabel = "Partial Paid";
                        PartialPaid();
                    }

                    $btn.closest('tr').find('.gross').text(newGrossTotal.toFixed(2));
                    $btn.text(statusLabel).prop('disabled', true);

                    const remainingPayment = paymentInput - amountToPay;
                    const newBalance = currentBalance - amountToPay;
                    currentBalance = newBalance;

                    $('#paymentReleased').val(remainingPayment > 0 ? remainingPayment.toFixed(2) : '');
                    $('#debitedTotal').text(remainingPayment > 0 ? remainingPayment.toFixed(2) : '0.00');

                    $.ajax({
                        url: '/Account/UpdateInvoiceWithNewBalanceReceivePayment',
                        type: 'POST',
                        data: {
                            OldGrossTotal: sendOldGrossTotal,
                            NewGrossTotal: newGrossTotal,
                            Balance: newBalance,
                            QuotationID: quotationID,
                            CustomerID: CustomerID
                        },
                        success: function () { },
                        error: function () {
                            alert('Error posting updated values.');
                        }
                    });

                    updateTotalAmountSummary(); // update totals again
                });
            },
            error: function () {
                alert('Error retrieving invoice data.');
            }
        });
    }

    function updateTotalAmountSummary() {
        let totalGross = 0;
        $('#dataTable .gross').each(function () {
            const val = parseFloat($(this).text());
            if (!isNaN(val)) totalGross += val;
        });

        const originalPayment = parseFloat($('#paymentReleased').val()) || 0;
        const originalTotal = parseFloat($('#amountOfPayment').text()) || 0;

        const journalAmount = originalTotal - totalGross;
        const toBeMade = totalGross;

        $('#amountOfPayment').text(totalGross.toFixed(2));
        $('#paymentToBeMade').text(toBeMade.toFixed(2));
        $('#journalAmount').text(journalAmount.toFixed(2));
    }



    // function AmountSummaryOfCustomer() {
    //     const CustomerID = $('#CustomerID').val();
    //     if (!CustomerID) return;

    //     $.ajax({
    //         url: '/Account/AmountSummaryOfCustomer',
    //         type: 'GET',
    //         data: { CustomerID },
    //         success: function (response) {
    //             const tableBody = $('#dataTable tbody');
    //             tableBody.empty();

    //             const items = response.listItems || response || [];
    //             if (!items.length) {
    //                 tableBody.append("<tr><td colspan='5'>No data found</td></tr>");
    //                 return;
    //             }

    //             items.forEach((item, index) => {
    //                 const grossTotal = parseFloat(item.grossTotal);
    //                 const isDisabled = grossTotal === 0 ? 'disabled' : '';

    //                 const row = $(`
    //                     <tr data-quotationid="${item.quotationID}">
    //                         <td>${index + 1}</td>
    //                         <td>${item.invoiceNumber}</td>
    //                         <td class="gross">${grossTotal.toFixed(2)}</td>
    //                         <td class="status">
    //                             <button class="status-btn btn btn-sm" style="background-color: #138496; color: white;" ${isDisabled}
    //                                 data-gross="${grossTotal}"
    //                                 data-invoice="${item.invoiceNumber}"
    //                                 data-quotationid="${item.quotationID}">
    //                                 Pay
    //                             </button>
    //                         </td>
    //                     </tr>
    //                 `);
    //                 tableBody.append(row);
    //             });

    //             $('.status-btn').off('click').on('click', function () {
    //                 const $btn = $(this);
    //                 const originalGross = parseFloat($btn.data('gross'));
    //                 const quotationID = $btn.data('quotationid');
    //                 const CustomerID = $('#CustomerID').val();

    //                 let paymentInput = parseFloat($('#paymentReleased').val()) || 0;

    //                 if (paymentInput <= 0) {
    //                     alert("Please enter a valid payment amount.");
    //                     return;
    //                 }
    //                      function FullPaid() {
    //     Swal.fire({
    //         title: "Amount submitted successfully",
    //         text: "",
    //         icon: "success",
    //         confirmButtonText: "OK",
    //         showCancelButton: false,
    //         showDenyButton: false,
    //         confirmButtonColor: "#138496"
    //     });
    // }

    //     function  PartialPaid(){
    //          Swal.fire({
    //             title: "Partial Amount submitted successfully",
    //             text: "",
    //             icon: "success",
    //             confirmButtonText: "OK",
    //         showCancelButton: false,
    //         showDenyButton: false,
    //             confirmButtonColor: "#138496",
    //             draggable: true
    //         });
    //     }
    //                 let amountToPay = 0;
    //                 let newGrossTotal = 0;
    //                 let statusLabel = "";
    //                 let sendOldGrossTotal = 0;

    //                 if (paymentInput >= originalGross) {
    //                     // Full payment
    //                     amountToPay = originalGross;
    //                     sendOldGrossTotal = originalGross;
    //                     newGrossTotal = 0;
    //                     statusLabel = "Paid";
    //                     FullPaid();
    //                 } else {
    //                     // Partial payment
    //                     amountToPay = paymentInput;
    //                     sendOldGrossTotal = amountToPay; 
    //                     newGrossTotal = originalGross - amountToPay;
    //                     statusLabel = "Partial Paid";
    //                     PartialPaid();
    //                 }

    //                 // Update UI
    //                 $btn.closest('tr').find('.gross').text(newGrossTotal.toFixed(2));
    //                 $btn.text(statusLabel).prop('disabled', true);

    //                 const remainingPayment = paymentInput - amountToPay;
    //                 const newBalance = currentBalance - amountToPay;
    //                 currentBalance = newBalance;

    //                 $('#paymentReleased').val(remainingPayment > 0 ? remainingPayment.toFixed(2) : '');
    //                 $('#balance').val(newBalance.toFixed(2));

                    
    //                 $.ajax({
    //                     url: '/Account/UpdateInvoiceWithNewBalanceReceivePayment',
    //                     type: 'POST',
    //                     data: {
    //                         OldGrossTotal: sendOldGrossTotal,      
    //                         NewGrossTotal: newGrossTotal,
    //                         Balance: newBalance,
    //                         QuotationID: quotationID,
    //                         CustomerID: CustomerID
    //                     },
    //                     success: function () {
                            
    //                     },
    //                     error: function () {
    //                         alert('Error posting updated values.');
    //                     }
    //                 });
    //             });
    //         },
    //         error: function () {
    //             alert('Error retrieving invoice data.');
    //         }
    //     });
    // }
    // ---------------------------------------------------------------

    //     function CustomerPaymentDetails() {
    //     const CustomerID = $('#CustomerID').val();
    //     const InvoiceID = $('#InvoiceID').val();

    //     if (!CustomerID) return;

    //     $.ajax({
    //         url: '/Account/GetCustomerPaymentDetails',
    //         type: 'GET',
    //         data: { CustomerID },
    //         success: function (response) {
    //             const tableBody = $('#paymenttable tbody');
    //             tableBody.empty();

    //             const items = response.listItems || response || [];

    //             if (!items.length) {
    //                 tableBody.append("<tr><td colspan='6'>No data found</td></tr>");
    //                 return;
    //             }

    //             items.forEach((item, index) => {
    //                 const totalAmount = parseFloat(item.totalAmount || 0);
    //                 const advanceAmount = parseFloat(item.advanceAmount || 0);
    //                 const isPaid = advanceAmount >= totalAmount;

    //                 const row = $(`
    //                     <tr data-invoiceid="${item.invoiceID}">
    //                         <td>${index + 1}</td>
    //                         <td>${item.invoiceNumber}</td>
    //                         <td>${totalAmount.toFixed(2)}</td>
    //                         <td class="advanceAmount">${advanceAmount.toFixed(2)}</td>
    //                         <td class="status">
    //                             <button class="status-btn"
    //                                 data-advanceamount="${advanceAmount}"
    //                                 data-invoiceid="${item.invoiceID}"
    //                                 ${isPaid ? 'disabled' : ''}>
    //                                 ${isPaid ? 'Paid' : 'Pay'}
    //                             </button>
    //                         </td>
    //                     </tr>
    //                 `);

    //                 tableBody.append(row);
    //             });

    //             $('.status-btn').off('click').on('click', function () {
    //                 const paymentInput = parseFloat($('#advancePayment').val()) || 0;
    //                 const CustomerID = $('#CustomerID').val();
    //                 const invoiceID = $(this).data('invoiceid');

    //                 //Payment input must be greater than 0
    //                 if (paymentInput <= 0) {
    //                     alert("Advance payment amount must be greater than 0.");
    //                     return;
    //                 }

    //                 const button = $(this);
    //                 const row = button.closest('tr');

    //                 $.ajax({
    //                     url: '/Account/SubmitAdvanceAmountDetails',
    //                     type: 'POST',
    //                     data: {
    //                         AdvanceAmount: paymentInput,
    //                         InvoiceID: invoiceID,
    //                         CustomerID: CustomerID
    //                     },
    //                     success: function () {
    //                         alert("Payment updated successfully.");

    //                         // Update the AdvanceAmount cell
    //                         row.find('.advanceAmount').text(paymentInput.toFixed(2));

    //                         //  Disable the button and mark as Paid
    //                         button.text('Paid').prop('disabled', true);

    //                         //  Clear the advancePayment input box
    //                         $('#advancePayment').val('0');
    //                     },
    //                     error: function () {
    //                         alert('Error posting updated values.');
    //                     }
    //                 });
    //             });
    //         },
    //         error: function () {
    //             alert('Error retrieving invoice data.');
    //         }
    //     });
    // }
        function FullPaid() {
        Swal.fire({
            title: "Amount submitted successfully",
            text: "",
            icon: "success",
            confirmButtonText: "OK",
            showCancelButton: false,
            showDenyButton: false,
            confirmButtonColor: "#138496",
            draggable: true
        });
    }

    function PartialPaid() {
        Swal.fire({
            title: "Partial Amount submitted successfully",
            text: "",
            icon: "success",
            confirmButtonText: "OK",
            showCancelButton: false,
            showDenyButton: false,
            confirmButtonColor: "#138496",
            draggable: true
        });
    }

    function CustomerPaymentDetails() {
        const CustomerID = $('#CustomerID').val();
        const InvoiceID = $('#InvoiceID').val();

        if (!CustomerID) return;

        $.ajax({
            url: '/Account/GetCustomerPaymentDetails',
            type: 'GET',
            data: { CustomerID },
            success: function (response) {
                const tableBody = $('#paymenttable tbody');
                tableBody.empty();

                const items = response.listItems || response || [];

                if (!items.length) {
                    tableBody.append("<tr><td colspan='6'>No data found</td></tr>");
                    return;
                }

                items.forEach((item, index) => {
                    const totalAmount = parseFloat(item.totalAmount || 0);
                    const advanceAmount = parseFloat(item.advanceAmount || 0);
                    const isPaid = advanceAmount >= totalAmount;

                    const row = $(`
                        <tr data-invoiceid="${item.invoiceID}">
                            <td>${index + 1}</td>
                            <td>${item.invoiceNumber}</td>
                            <td>${totalAmount.toFixed(2)}</td>
                            <td class="advanceAmount">${advanceAmount.toFixed(2)}</td>
                            <td class="status">
                                <button class="status-btn"
                                    data-advanceamount="${advanceAmount}"
                                    data-invoiceid="${item.invoiceID}"
                                    ${isPaid ? 'disabled' : ''}>
                                    ${isPaid ? 'Paid' : 'Pay'}
                                </button>
                            </td>
                        </tr>
                    `);

                    tableBody.append(row);
                });

                $('.status-btn').off('click').on('click', function () {
                    const paymentInput = parseFloat($('#advancePayment').val()) || 0;
                    const CustomerID = $('#CustomerID').val();
                    const invoiceID = $(this).data('invoiceid');

                    if (paymentInput <= 0) {
                        alert("Advance payment amount must be greater than 0.");
                        return;
                    }

                    const button = $(this);
                    const row = button.closest('tr');

                    $.ajax({
                        url: '/Account/SubmitAdvanceAmountDetails',
                        type: 'POST',
                        data: {
                            AdvanceAmount: paymentInput,
                            InvoiceID: invoiceID,
                            CustomerID: CustomerID
                        },
                        success: function () {
                            // Get current advance amount from table
                            const currentAdvance = parseFloat(row.find('.advanceAmount').text()) || 0;

                            // Calculate new total advance
                            const newAdvance = currentAdvance + paymentInput;

                            // Update advance amount in the table cell
                            row.find('.advanceAmount').text(newAdvance.toFixed(2));

                            // Get total amount for comparison
                            const totalAmount = parseFloat(row.find('td:nth-child(3)').text()) || 0;

                            // If new advance covers or exceeds total, disable button and mark as Paid
                            if (newAdvance >= totalAmount) {
                                button.text('Paid').prop('disabled', true);
                                FullPaid();
                            } else {
                                PartialPaid();
                            }

                            // Clear the advance payment input
                            $('#advancePayment').val('0');
                        },
                        error: function () {
                            alert('Error posting updated values.');
                        }
                    });
                });
            },
            error: function () {
                alert('Error retrieving invoice data.');
            }
        });
    }





 
</script> 
