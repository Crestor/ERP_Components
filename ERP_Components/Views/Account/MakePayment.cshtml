


 @using ERP_Component_DAL.Models
@model MakePayment
@{
    ViewBag.Title = "Make Payment";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
}
<link rel="stylesheet" href="~/css/Product.css" />
<style>
    #outstanding, #paymenttable {
    display: none;
    }

    .status button {
    border: none;
    padding: 6px 10px;
    border-radius: 5px;
    cursor: pointer;
    }

    .status button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    }
</style>
<div class="form-section">
    <h3>Payment Details</h3>
    <div class="form-row" style="width:50%">
        <label for="date">Date</label>
        <input type="date" id="date" name="date" required />
    </div>
    <div class="form-row">
        <label for="VenderName">Vendor Name</label>
        <select name="VendorID" id="VendorID" onchange="getPendingAmount(); showOutstanding();">
            <option selected disabled>select</option>

            @if (ViewBag.VendorID != null)
            {
                <option selected value="@ViewBag.VendorID">@ViewBag.VendorName</option>
                
            }else 
            
            {
                foreach (var vendor in Model.VendorNameList)
            {
                <option value="@vendor.VendorID">@vendor.VendorName</option>
            }
            }
        </select>
        <label for="project">Project:</label>
        <input type="text" id="project" name="project" required />
    </div>
</div>
<div id="outstanding">
    <h2>Outstanding Summary</h2>
    <div class="table">
        <table>
            <thead>
                <tr><th>Particular</th><th>Debited</th><th>Credited</th></tr>
            </thead>
            <tbody>
                <tr><td>Amount Paid in advance:</td><td>1000</td><td>0</td></tr>
                <tr><td>Outstanding Bill Amount:</td><td>0</td><td>1000</td></tr>
                <tr><td>Debit Note Amount:</td><td>0</td><td>1000</td></tr>
                <tr><td>Credit Note Amount:</td><td>0</td><td>1000</td></tr>
                <tr><td>Unsettled Journal Entries</td><td>0</td><td>1000</td></tr>
                <tr><td>Total Amount</td><td></td><td></td></tr>
            </tbody>
        </table>





        <div class="alert alert-warning mt-3 " style="margin-bottom: 7px;">
            <i class="fas fa-exclamation-circle"></i>
            You have pending bill of ₹  <span id="pendingAmount"></span>. Settle bill?
            <input  type="radio" name="taxtype" value="yes" onchange="getAmountSummary(); paymentsettle();">Yes
            @* <label >Yes</label> *@
        
        
            <input  type="radio" name="taxtype" value="no" onchange="advancepayment();">No
            @* <label >No</label> *@
    </div>

  </div>

    <div id="bill" style="display:none; margin:25px;" class="form-section">
        <div style="display:flex; justify-content:space-between; margin-left:25px;">
            <div class="label" style="height:50px;">
                <label for="payment">Payment Released</label>
                <input type="text" id="payment" name="payment" oninput="paymentrelease()" />
            </div>
            <div>
                <p>Payment to be made: <input type="text" readonly value="₹" /></p>
                <p>Amount of payment: <input type="text" readonly /></p>
                <p>Journal Amount: <input type="text" readonly /></p>
                <p>Amount in hand: <input type="text" id="debitedTotal" readonly /></p>
            </div>
        </div>
        <input type="hidden" name="PurchaseOrderID" value="@Model.PurchaseOrderID" hidden />
        <h2>Bills of Settlement</h2>
        <div class="table">
            <table id="dataTable">
                <thead>
                    <tr>
                        <th>S.No</th>
                        <th>BillNumber</th>
                        <th>Total Amount</th>
                        <th>Total PaidAmount</th>
                        <th>Due Amount</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Filled dynamically -->
                </tbody>
            </table>
        </div>
    </div>
</div>


<div id="Advancepayment" style="display:none;width:94%;padding: 1%;margin: auto;" class="alert alert-warning mt-3">
        <label id="pendingpayment" class="required fas fa-exclamation-circle" for="advance">Do you want to make advance payment?</label>
    <input type="radio" name="advancePay" value="yes" onchange="getPaymentDetailsList(); paymentbill() ;" /> Yes
    <input type="radio" name="advancePay" value="no" /> No
</div>

<div id="paymenttable" class="form-section">
    <div style="display:flex; justify-content:space-between">
        <div class="label" style="height:50px;">
            <label for="payment">Payment Released</label>
            @* <input type="text" id="payment2" name="payment2" /> *@
            <input type="number" id="payment2" placeholder="Enter Payment Released" />

        </div>
        <div>
            <p>Payment to be made: <input type="text" readonly /></p>
            <p>Amount of payment: <input type="text" readonly /></p>
            <p>Journal Amount: <input type="text" readonly /></p>
            <p>Amount in hand:  <input type="text" id="debitedAdvanceTotal" readonly /></p>


        </div>
    </div>
    <h2>Payment Details</h2>
    <table id="dataTable">
        <thead>
            <tr>
                <th>S.No</th>
                <th>Net Total</th>
                <th>Advance Amount</th>
                <th>Amount Paid</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            <!-- Filled by JS -->
        </tbody>
    </table>

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

    $(document).ready(function () {

        var vendorName = '@ViewBag.VendorName';
    if(vendorName != null){
        getPendingAmount();
        showOutstanding();
    }
    
    });

    function showOutstanding() {
        document.getElementById("outstanding").style.display = "block";
    }

    function paymentsettle() {
        document.getElementById("bill").style.display = "block";
    }

    function advancepayment() {
        document.getElementById("Advancepayment").style.display = "block";
        document.getElementById("bill").style.display = "none";
    }

    function paymentbill() {
        document.getElementById("paymenttable").style.display = "block";
    }

    function getPendingAmount() {
        const vendorId = $('#VendorID').val();
        if (vendorId) {
            $.ajax({
                url: '/Account/AmountOfMakePayment',
                type: 'GET',
                data: { vendorId: vendorId },
                success: function (data) {
                    $('#pendingAmount').text(data.pendingAmount);
                },
                error: function () {
                    alert('Error retrieving pending amount.');
                }
            });
        }
    }

    function paymentrelease() {
        const payment = parseFloat($('#payment').val()) || 0;
        $('#debitedTotal').val(payment);
        remainingPaymentInput = payment; // update remaining globally
        resetPaymentButtons(); // reset any previous clicks
    }

    function getAmountSummary() {
        const vendorId = $('#VendorID').val();
        const paymentReleased = parseFloat($('#payment').val()) || 0;

        if (!vendorId) {
            alert("Please select a valid vendor.");
            return;
        }

        $.ajax({
            url: '/Account/AmountSummary',
            type: 'GET',
            data: { vendorId: vendorId },
            success: function (response) {
                const tableBody = $('#dataTable tbody');
                tableBody.empty();
                const items = response.listItems || response || [];

                if (!items.length) {
                    tableBody.append("<tr><td colspan='5'>No data found</td></tr>");
                    return;
                }

                items.forEach((item, index) => {
                    const billNumber = item.billNumber || '';
                    const total = parseFloat(item.totalAmount);
                    const paidAmount = parseFloat(item.paidAmount);
                    const remaining = parseFloat(item.remainingAmount);
                    const purchaseOrderID = item.purchaseOrderID;

                    const tr = $(`
                        <tr>
                            <td>${index + 1}</td>
                            <td>${billNumber}</td>
                            <td>${total}</td>
                            <td>${paidAmount}</td>
                            <td>${remaining}</td>
                            <td class="status">
                                <button class="status-btn"
                                        data-total="${total}"
                                        data-paidamount="${paidAmount}"
                                        data-remaining="${remaining}"
                                        data-poid="${purchaseOrderID}">
                                     Pay 
                                </button>
                            </td>
                        </tr>
                    `);


                    tableBody.append(tr);
                });

                // Reset global values
                usedOrders.clear();
                remainingPaymentInput = paymentReleased;
            },
            error: function () {
                alert('Failed to load summary data.');
            }
        });
    }

    let remainingPaymentInput = 0;
    let usedOrders = new Set(); // Track which PO is already used

    function resetPaymentButtons() {
        $('.status-btn').each(function () {
            const btn = $(this);
            const purchaseOrderID = btn.data('poid');
            if (usedOrders.has(purchaseOrderID)) {
                btn.prop('disabled', false).text('Click to Pay');
                usedOrders.delete(purchaseOrderID);
            }
        });
    }

    // When user types payment
    $('#payment').on('input', function () {
        paymentrelease(); // only updates UI, no controller call
    });

    // When clicking status button for a PO
    $(document).on('click', '.status-btn', function () {
        const button = $(this);
        const total = parseFloat(button.data('total'));
        const remaining = parseFloat(button.data('remaining'));
        const purchaseOrderID = button.data('poid');

        if (usedOrders.has(purchaseOrderID) || remainingPaymentInput <= 0) {
            return;
        }

           const finalPaidAmount = Math.min(remaining, remainingPaymentInput);
    remainingPaymentInput -= finalPaidAmount;

    $('#payment').val(remainingPaymentInput.toFixed(2));
    $('#debitedTotal').val(remainingPaymentInput.toFixed(2));

    usedOrders.add(purchaseOrderID);
    button.prop('disabled', true);
    button.text(finalPaidAmount === remaining
        ? "Full Paid"
        :"Partial Paid");


    // Update the corresponding Due Amount cell dynamically
    const row = button.closest('tr');
    const dueAmountCell = row.find('td').eq(3); // Assuming 4th column is Due Amount
    const newRemaining = (remaining - finalPaidAmount).toFixed(2);
    dueAmountCell.text(newRemaining);


        $.ajax({
            url: '/Account/ReceivePaymentDetails',
            type: 'POST',
            data: {

                totalAmount: total,
                remainingAmount: remaining,
                finalPaidAmount: finalPaidAmount,
                purchaseOrderID: purchaseOrderID
            },
            success: function () {
                console.log("Payment submitted:", {
                    purchaseOrderID,
                    finalPaidAmount
                });
            },
            error: function () {
                alert("Failed to submit payment.");
            }
        });
    });
</script>



<script>
    let remainingAdvanceInput = 0;
    let usedAdvanceOrders = new Set();

    function getPaymentDetailsList() {
        const vendorId = $('#VendorID').val();

        $.ajax({
            url: '/Account/AdvancedPaymentDetailsList',
            type: 'GET',
            data: { vendorId: vendorId },
            success: function (response) {
                const tableBody = $('#dataTable tbody');
                tableBody.empty();

                const items = response.listItems || response || [];

                if (!items.length) {
                    tableBody.append("<tr><td colspan='5'>No data found</td></tr>");
                    return;
                }

                items.forEach((item, index) => {
                    const netTotal = parseFloat(item.netTotal);
                    const amountPaid = parseFloat(item.amountPaid);
                    const advanceAmount = parseFloat(item.advanceAmount);
                    const purchaseOrderID = item.purchaseOrderID;

                    const isPaid = amountPaid >= advanceAmount;
                    let buttonText = "Pay";
                    if (isPaid) {
                        buttonText = "Full Paid";
                    } else if (amountPaid > 0) {
                           buttonText = "Partial Paid";

                    }

                    const tr = $(`<tr>
                        <td>${index + 1}</td>
                        <td>${netTotal.toFixed(2)}</td>
                        <td>${advanceAmount.toFixed(2)}</td>
                        <td class="amountPaid">${amountPaid.toFixed(2)}</td>
                        <td class="status">
                            <button class="advance-status-btn"
                                    data-poid="${purchaseOrderID}"
                                    data-net="${netTotal}"
                                    data-advance="${advanceAmount}"
                                    data-paid="${amountPaid}"
                                    ${isPaid ? 'disabled' : ''}>
                                ${buttonText}
                            </button>
                        </td>
                    </tr>`);

                    tableBody.append(tr);
                });

                // Reset globals
                remainingAdvanceInput = parseFloat($('#payment2').val()) || 0;
                usedAdvanceOrders.clear();
            },
            error: function () {
                alert('Failed to load summary data.');
            }
        });
    }

    // Update remaining value on input
    $('#payment2').on('input', function () {
        remainingAdvanceInput = parseFloat($(this).val()) || 0;
        $('#debitedAdvanceTotal').val(remainingAdvanceInput.toFixed(2));
        resetAdvanceButtons();
    });

    function resetAdvanceButtons() {
        $('.advance-status-btn').each(function () {
            const btn = $(this);
            const purchaseOrderID = btn.data('poid');
            if (usedAdvanceOrders.has(purchaseOrderID)) {
                btn.prop('disabled', false).text('Pay');
                usedAdvanceOrders.delete(purchaseOrderID);
            }
        });
    }

    $(document).on('click', '.advance-status-btn', function () {
        const button = $(this);
        const purchaseOrderID = button.data('poid');
        const advanceAmount = parseFloat(button.data('advance'));
        const alreadyPaid = parseFloat(button.data('paid'));

        const remainingAdvance = advanceAmount - alreadyPaid;
        if (usedAdvanceOrders.has(purchaseOrderID) || remainingAdvanceInput <= 0 || remainingAdvance <= 0) {
            return;
        }

        const paidNow = Math.min(remainingAdvance, remainingAdvanceInput);
        remainingAdvanceInput -= paidNow;

        // Update UI
        $('#payment2').val(remainingAdvanceInput.toFixed(2));
        $('#debitedAdvanceTotal').val(remainingAdvanceInput.toFixed(2));
        usedAdvanceOrders.add(purchaseOrderID);

        const newAmountPaid = alreadyPaid + paidNow;
        const row = button.closest('tr');
        row.find('.amountPaid').text(newAmountPaid.toFixed(2));

        button.prop('disabled', true);
        button.text(paidNow === remainingAdvance
            ? "Full Paid"
            :"Partial Paid");

        $.ajax({
            url: '/Account/UpdateAdvancePayment',
            type: 'POST',
            data: {
                PurchaseOrderID: purchaseOrderID,
                AdvanceAmount: paidNow
            },
            success: function (response) {
                if (!response.success) {
                    alert("Server rejected update");
                }
            },
            error: function () {
                alert("Error during advance payment update.");
            }
        });
    });

    // Trigger get list on vendor change
    $(document).ready(function () {
        $('#VendorID').change(getPaymentDetailsList);
    });
</script>


