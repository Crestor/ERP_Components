@{
    ViewBag.Title = "Add Stock";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f6f8fa;
        margin: 0;
        padding: 20px;
    }
    h1 {
        text-align: center;
    }
    .dashboard {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }
    .card {
        flex: 1;
        min-width: 180px;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 5px rgba(0,0,0,0.1);
        text-align: center;
    }
    .filters {
        margin-bottom: 20px;
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    input, select, button {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 14px;
    }
    button {
        background-color: #007bff;
        color: white;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    button:hover {
        background-color: #0056b3;
    }
    table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 10px;
        overflow: hidden;
    }
    th, td {
        padding: 12px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }
    th {
        background-color: #007bff;
        color: white;
    }
    .actions button {
        margin-right: 5px;
        padding: 4px 6px;
        font-size: 12px;
    }
</style>




    <h1>Inventory Management System</h1>

    <!-- Dashboard Cards -->
    <div class="dashboard">
        <div class="card">
            <h3>Total Products</h3>
            <div id="totalProducts">0</div>
        </div>
        <div class="card">
            <h3>Categories</h3>
            <div id="totalCategories">0</div>
        </div>
        <div class="card">
            <h3>Total Stock Value</h3>
            <div id="totalStockValue">₹0</div>
        </div>
        <div class="card">
            <h3>Low Stock Items</h3>
            <div id="lowStockItems">0</div>
        </div>
    </div>

    <!-- Filters -->
    <div class="filters">
        <input type="text" id="searchInput" placeholder="Search product...">
        <select id="categoryFilter">
            <option value="">All Categories</option>
        </select>
        <select id="stockFilter">
            <option value="">All Stock Status</option>
            <option value="low">Low Stock (&lt;10)</option>
            <option value="in">In Stock</option>
            <option value="out">Out of Stock</option>
        </select>
        <button onclick="addProduct()">Add New Product</button>
    </div>

    <!-- Inventory List -->
    <table>
        <thead>
            <tr>
                <th>Product</th>
                <th>SKU</th>
                <th>Category</th>
                <th>Stock</th>
                <th>Price (₹)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="inventoryBody">
            <!-- Dynamic rows go here -->
        </tbody>
    </table>

    <script>
        // Dummy Inventory Data
        let products = [
            { name: "Laptop", sku: "LP1001", category: "Electronics", stock: 12, price: 55000 },
            { name: "Mouse", sku: "MS2001", category: "Accessories", stock: 8, price: 800 },
            { name: "Keyboard", sku: "KB3001", category: "Accessories", stock: 20, price: 1200 },
        ];

        function renderInventory() {
            const inventoryBody = document.getElementById("inventoryBody");
            const search = document.getElementById("searchInput").value.toLowerCase();
            const category = document.getElementById("categoryFilter").value;
            const stockFilter = document.getElementById("stockFilter").value;

            let filtered = products.filter(p => {
                return (
                    (p.name.toLowerCase().includes(search) || p.sku.toLowerCase().includes(search)) &&
                    (category === "" || p.category === category) &&
                    (stockFilter === "" ||
                     (stockFilter === "low" && p.stock < 10) ||
                     (stockFilter === "in" && p.stock > 0) ||
                     (stockFilter === "out" && p.stock === 0))
                );
            });

            inventoryBody.innerHTML = "";
            filtered.forEach((product, index) => {
                inventoryBody.innerHTML += `
                    <tr>
                        <td>${product.name}</td>
                        <td>${product.sku}</td>
                        <td>${product.category}</td>
                        <td>${product.stock}</td>
                        <td>${product.price.toLocaleString('en-IN')}</td>
                        <td class="actions">
                            <button onclick="editProduct(${index})"><i class="fas fa-edit"></i></button>
                            <button onclick="deleteProduct(${index})"><i class="fas fa-trash"></i></button>
                        </td>
                    </tr>`;
            });

            updateDashboard();
            updateCategoryOptions();
        }

        function updateDashboard() {
            document.getElementById("totalProducts").textContent = products.length;
            const categories = [...new Set(products.map(p => p.category))];
            document.getElementById("totalCategories").textContent = categories.length;
            const totalValue = products.reduce((acc, p) => acc + (p.price * p.stock), 0);
            document.getElementById("totalStockValue").textContent = `₹${totalValue.toLocaleString('en-IN')}`;
            const lowStock = products.filter(p => p.stock < 10).length;
            document.getElementById("lowStockItems").textContent = lowStock;
        }

        function updateCategoryOptions() {
            const categories = [...new Set(products.map(p => p.category))];
            const select = document.getElementById("categoryFilter");
            select.innerHTML = `<option value="">All Categories</option>`;
            categories.forEach(cat => {
                select.innerHTML += `<option value="${cat}">${cat}</option>`;
            });
        }

        function addProduct() {
            const name = prompt("Product Name:");
            const sku = prompt("Product SKU:");
            const category = prompt("Category:");
            const stock = parseInt(prompt("Stock Quantity:"), 10);
            const price = parseFloat(prompt("Price:"));
            if (name && sku && category && !isNaN(stock) && !isNaN(price)) {
                products.push({ name, sku, category, stock, price });
                renderInventory();
            } else {
                alert("Invalid input.");
            }
        }

        function editProduct(index) {
            const product = products[index];
            const name = prompt("Edit Product Name:", product.name);
            const sku = prompt("Edit SKU:", product.sku);
            const category = prompt("Edit Category:", product.category);
            const stock = parseInt(prompt("Edit Stock Quantity:", product.stock), 10);
            const price = parseFloat(prompt("Edit Price:", product.price));
            if (name && sku && category && !isNaN(stock) && !isNaN(price)) {
                products[index] = { name, sku, category, stock, price };
                renderInventory();
            } else {
                alert("Invalid input.");
            }
        }

        function deleteProduct(index) {
            if (confirm("Are you sure you want to delete this product?")) {
                products.splice(index, 1);
                renderInventory();
            }
        }

        document.getElementById("searchInput").addEventListener("input", renderInventory);
        document.getElementById("categoryFilter").addEventListener("change", renderInventory);
        document.getElementById("stockFilter").addEventListener("change", renderInventory);

        // Initial Render
        renderInventory();
    </script>
