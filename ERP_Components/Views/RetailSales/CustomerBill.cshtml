@using ERP_Component_DAL.Models

@{
    ViewBag.Title = "Customer Bill";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
}

<link rel="stylesheet" href="~/css/ProductTwo.css" />
<style>
    .container-main {
        display: flex;
        flex-direction: row;
        width: 100%;
    }

    #leftSection {
        flex: 1;
        padding: 20px;
        transition: width 0.3s ease;
    }

    #rightSection {
        width: 0;
        overflow: hidden;
        padding: 0;
        transition: width 0.3s ease;
        background-color: #f8f9fa;
        display: none;
        border-left: 1px solid #ccc;
    }
</style>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<form method="post" asp-action="SetCustomerBill" asp-controller="RetailSales">
    <div class="form-section">
        <h3>Basic Details</h3>
        <div class="form-row">
            <label>Contact Number:</label>
            <input type="number" id="ContactNumber" name="ContactNumber" />
            <label>Customer Name:</label>
            <input type="text" id="customerName" name="customerName" />
        </div>
    </div>

    <div class="table">
        <button type="button" style="float:right" class="btn" id="addNewRow">Add Row</button>
        <table id="orderTable">
            <thead>
                <tr>
                    <th>S.No</th>
                    <th>Product Name</th>
                    <th>UOM</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Discount Rate (%)</th>
                    <th>Discount Amount</th>
                    <th>Taxable Amount</th>
                    <th>CGST (%)</th>
                    <th>SGST (%)</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <tr>
                    <td>1</td>
                    <td>
                        <select class="ItemName">
                            <option selected disabled>Select Product</option>
                            @foreach (var product in Model.ItemNames)
                            {
                                <option value="@product.ItemId"
                                        data-sellingprice="@product.SellingPrice"
                                        data-unitofmeasure="@product.UnitOFMeasure">
                                    @product.ItemName
                                </option>
                            }
                        </select>
                        <input type="hidden" class="ItemId" name="ItemLists[0].ItemId" value="" readonly />
                    </td>
                    <td><input type="text" class="UnitOFMeasure" name="ItemLists[0].UnitOFMeasure" readonly></td>
                    <td><input type="number" class="SellingPrice" name="ItemLists[0].SellingPrice" oninput="calculateRow(this)"></td>
                    <td><input type="number" class="Quantity" name="ItemLists[0].Quantity" oninput="calculateRow(this)"></td>
                    <td><input type="number" class="discountRate" name="ItemLists[0].discountRate" oninput="calculateRow(this)"></td>
                    <td><input type="number" class="discountAmount" name="ItemLists[0].discountAmount" readonly></td>
                    <td><input type="number" class="taxableAmount" name="ItemLists[0].taxableAmount" readonly></td>
                    <td>
                        <select class="cgst" name="ItemLists[0].cgst" onchange="calculateRow(this)">
                            <option value="0">0%</option>
                            <option value="5">5%</option>
                            <option value="9">9%</option>
                            <option value="12">12%</option>
                            <option value="18">18%</option>
                            <option value="28">28%</option>
                        </select>
                    </td>
                    <td>
                        <select class="sgst" name="ItemLists[0].sgst" onchange="calculateRow(this)">
                            <option value="0">0%</option>
                            <option value="5">5%</option>
                            <option value="9">9%</option>
                            <option value="12">12%</option>
                            <option value="18">18%</option>
                            <option value="28">28%</option>
                        </select>
                    </td>
                    <td><input type="text" class="total" name="TotalAmount" readonly></td>
                </tr>
            </tbody>
        </table><br />
    </div>

    <div class="form-section">
        <h3>Amount Details</h3>
        <div class="form-row">
            <label>Total Amount: </label>
            <input type="number" id="grandTotal" name="TotalAmount" readonly />
            <label>Discount Amount: </label>
            <input type="number" name="TotalDiscountAmount" id="totalDiscountAmount" readonly />
        </div>
        <div class="form-row">
            <label>Taxable Amount: </label>
            <input type="number" id="totalDiscountPercent" readonly />
            <label>Gross Total: </label>
            <input type="text" name="grossTotal" id="grossTotal" readonly />
        </div>
    </div>

    <div class="button">
        <button type="submit">Submit</button>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelector('#tableBody').addEventListener('change', function (e) {
            if (e.target.classList.contains('ItemName')) {
                SetPriceFromDropdown(e.target);
            }
        });

        document.getElementById('addNewRow').addEventListener('click', addRow);
    });

    function SetPriceFromDropdown(dropdown) {
        const selectedOption = dropdown.options[dropdown.selectedIndex];

        const itemId = selectedOption.value;
        const price = selectedOption.getAttribute("data-sellingprice");
        const uom = selectedOption.getAttribute("data-unitofmeasure");

        const row = dropdown.closest('tr');
        if (row) {
            const priceInput = row.querySelector('.SellingPrice');
            const uomInput = row.querySelector('.UnitOFMeasure');
            const itemIdInput = row.querySelector('.ItemId');

            if (priceInput && uomInput && itemIdInput) {
                priceInput.value = price;
                uomInput.value = uom;
                itemIdInput.value = itemId;

                calculateRow(priceInput);
            }
        }
    }

    function addRow() {
        const tableBody = document.getElementById('tableBody');
        const rowCount = tableBody.rows.length;
        const newRow = tableBody.rows[0].cloneNode(true);

        newRow.querySelectorAll('input, select').forEach((input) => {
            if (input.tagName === 'INPUT') input.value = '';
            else if (input.tagName === 'SELECT') input.selectedIndex = 0;

            if (input.name) {
                input.name = input.name.replace(/\[\d+\]/, `[${rowCount}]`);
            }
        });

        newRow.cells[0].innerText = rowCount + 1;
        tableBody.appendChild(newRow);
    }

    function calculateRow(input) {
        const row = input.closest('tr');

        const qty = parseFloat(row.querySelector('.Quantity').value) || 0;
        const price = parseFloat(row.querySelector('.SellingPrice').value) || 0;
        const discountRate = parseFloat(row.querySelector('.discountRate').value) || 0;
        const cgst = parseFloat(row.querySelector('.cgst').value) || 0;
        const sgst = parseFloat(row.querySelector('.sgst').value) || 0;

        const gross = qty * price;
        const discountAmount = gross * (discountRate / 100);
        const taxable = gross - discountAmount;
        const total = taxable + (taxable * (cgst + sgst) / 100);

        row.querySelector('.discountAmount').value = discountAmount.toFixed(2);
        row.querySelector('.taxableAmount').value = taxable.toFixed(2);
        row.querySelector('.total').value = total.toFixed(2);

        calculateSummary();
    }

    function calculateSummary() {
        const rows = document.querySelectorAll('#tableBody tr');
        let totalDiscountAmount = 0, totalGross = 0, taxableAmount = 0, grandTotal = 0;

        rows.forEach(row => {
            const qty = parseFloat(row.querySelector('.Quantity').value) || 0;
            const price = parseFloat(row.querySelector('.SellingPrice').value) || 0;
            const discount = parseFloat(row.querySelector('.discountAmount').value) || 0;
            const total = parseFloat(row.querySelector('.total').value) || 0;

            totalGross += qty * price;
            totalDiscountAmount += discount;
            grandTotal += total;
        });

        taxableAmount = totalGross - totalDiscountAmount;

        document.getElementById('grandTotal').value = totalGross.toFixed(2);
        document.getElementById('totalDiscountAmount').value = totalDiscountAmount.toFixed(2);
        document.getElementById('totalDiscountPercent').value = taxableAmount.toFixed(2);
        document.getElementById('grossTotal').value = grandTotal.toFixed(2);
    }
</script>
<script>
    $(document).ready(function () {
        let isFetching = false;

        $("#ContactNumber").on("blur", function () {
            if (isFetching) return; //  Stop if already fetching

            var contactNo = $(this).val();
            if (contactNo && contactNo.length === 10) {
                isFetching = true; //  Set flag to prevent re-entry

                $.ajax({
                    url: '/RetailSales/GetCustomerByContact',
                    type: 'GET',
                    data: { ContactNO: contactNo },
                    success: function (data) {
                        if (data && data.customerName) {
                            $("#customerName").val(data.customerName);
                        } else {
                            alert("Customer not found.");
                            $("#customerName").val('');
                        }

                        isFetching = false; //  Reset flag after success
                    },
                    error: function () {
                        alert("Error fetching customer data.");
                        isFetching = false; //  Reset flag on error
                    }
                });
            }
        });
    });
</script>


@* <script>
    $(document).ready(function () {
        $("#ContactNumber").on("blur", function () {
            var contactNo = $(this).val();
            console.log("Typed number: " + contactNo); // ✅ Debug log

            if (contactNo && contactNo.length === 10) {
                $.ajax({
                    url: '/RetailSales/GetCustomerByContact',
                    type: 'GET',
                    data: { ContactNO: contactNo },
                    success: function (data) {
                        console.log("Response: ", data); // ✅ Debug log

                        if (data && data.CustomerName) {
                            $("#customerName").val(data.CustomerName);
                        } else {
                            alert("Customer not found.");
                            $("#customerName").val('');
                        }
                    },
                    error: function () {
                        alert("Error fetching customer data.");
                    }
                });
            }
        });
    });
</script>
 *@

@* @using ERP_Component_DAL.Models;

@{
    ViewBag.Title = "Customer Bill";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
}

<link rel="stylesheet" href="~/css/ProductTwo.css" />

<form method="post" asp-action="SetCustomerBill" asp-controller="RetailSales">
    <div class="form-section">
        <h3>Basic Details</h3>
        <div class="form-row">
            <label>Customer Name:</label>
            <input type="text" id="customerName" name="customerName" />
            <label>Contact Name:</label>
            <input type="Number" id="ContactNumber" name="ContactNumber" />
        </div>
    </div>

    <div class="table">
        <button type="button" style="float:right" class="btn" id="addNewRow">Add Row</button>
        <table id="orderTable">
            <thead>
                <tr>
                    <th>S.No</th>
                    <th>Product Name</th>
                    <th>UOM</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Discount Rate (%)</th>
                    <th>Discount Amount</th>
                    <th>Taxable Amount</th>
                    <th>CGST (%)</th>
                    <th>SGST (%)</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody id="tableBody">
                <tr>
                    <td>1</td>
                    <td>
                        <select class="ItemName">
                            <option selected disabled>Select Product</option>
                            @foreach (var product in Model.ItemNames)
                            {
                                <option value="@product.ItemId"
                                        data-SellingPrice="@product.SellingPrice"
                                        data-UnitOFMeasure="@product.UnitOFMeasure">
                                    @product.ItemName
                                </option>
                            }
                        </select>
                        <input type="hidden" class="ItemId" name="ItemLists[0].ItemId" value="" readonly />
                    </td>
                    <td><input type="text" class="UnitOFMeasure" name="ItemLists[0].UnitOFMeasure" readonly></td>
                        <input type="number" class="SellingPrice" name="ItemLists[0].SellingPrice" oninput="calculateRow(this)">

                    <td><input type="number" class="SellingPrice" name="ItemLists[0].SellingPrice" oninput="calculateRow(this)"></td>
                    <td><input type="number" class="Quantity" name="ItemLists[0].Quantity" oninput="calculateRow(this)"></td>
                    <td><input type="number" class="discountRate" name="ItemLists[0].discountRate" oninput="calculateRow(this)"></td>
                    <td><input type="number" class="discountAmount" name="ItemLists[0].discountAmount" readonly></td>
                    <td><input type="number" class="taxableAmount" name="ItemLists[0].taxableAmount" readonly></td>
                    <td>
                        <select class="cgst" name="ItemLists[0].cgst" onchange="calculateRow(this)">
                            <option value="0">0%</option>
                            <option value="5">5%</option>
                            <option value="9">9%</option>
                            <option value="12">12%</option>
                            <option value="18">18%</option>
                            <option value="28">28%</option>
                        </select>
                    </td>
                    <td>
                        <select class="sgst" name="ItemLists[0].sgst" onchange="calculateRow(this)">
                            <option value="0">0%</option>
                            <option value="5">5%</option>
                            <option value="9">9%</option>
                            <option value="12">12%</option>
                            <option value="18">18%</option>
                            <option value="28">28%</option>
                        </select>
                    </td>
                    <td><input type="text" class="total" name="TotalAmount" readonly></td>
                </tr>
            </tbody>
        </table><br />
    </div>

    <div class="form-section">
        <h3>Amount Details</h3>
        <div class="form-row">
            <label>Total Amount: </label>
            <input type="number" id="grandTotal" readonly />
            <label>Discount Amount: </label>
            <input type="number" name="TotalDiscountAmount" id="totalDiscountAmount" readonly />
        </div>
        <div class="form-row">
            <label>Taxable Amount: </label>
            <input type="number" id="totalDiscountPercent" readonly />
            <label>Gross Total: </label>
            <input type="text" name="grossTotal" id="grossTotal" readonly />
        </div>
    </div>

    <div class="button">
        <button type="submit">Submit</button>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Bind item change event using delegation
        document.querySelector('#tableBody').addEventListener('change', function (e) {
            if (e.target.classList.contains('ItemName')) {
                SetPriceFromDropdown(e.target);
            }
        });

        // Add row button
        document.getElementById('addNewRow').addEventListener('click', addRow);
    });

    function SetPriceFromDropdown(dropdown) {
        const selectedOption = dropdown.options[dropdown.selectedIndex];

        const itemId = selectedOption.value;
        const price = selectedOption.getAttribute("data-SellingPrice");
        const uom = selectedOption.getAttribute("data-UnitOFMeasure");

        const row = dropdown.closest('tr');
        row.querySelector('.SellingPrice').value = price;
        row.querySelector('.UnitOFMeasure').value = uom;
        row.querySelector('.ItemId').value = itemId;

        calculateRow(row.querySelector('.SellingPrice'));
    }

    function addRow() {
        const tableBody = document.getElementById('tableBody');
        const rowCount = tableBody.rows.length;
        const newRow = tableBody.rows[0].cloneNode(true);

        newRow.querySelectorAll('input, select').forEach((input) => {
            if (input.tagName === 'INPUT') input.value = '';
            else if (input.tagName === 'SELECT') input.selectedIndex = 0;

            if (input.name) {
                const newName = input.name.replace(/\[\d+\]/, `[${rowCount}]`);
                input.name = newName;
            }
        });

        newRow.cells[0].innerText = rowCount + 1;
        tableBody.appendChild(newRow);
    }

    function calculateRow(input) {
        const row = input.closest('tr');

        const qty = parseFloat(row.querySelector('.Quantity').value) || 0;
        const price = parseFloat(row.querySelector('.SellingPrice').value) || 0;
        const discountRate = parseFloat(row.querySelector('.discountRate').value) || 0;
        const cgst = parseFloat(row.querySelector('.cgst').value) || 0;
        const sgst = parseFloat(row.querySelector('.sgst').value) || 0;

        const gross = qty * price;
        const discountAmount = gross * (discountRate / 100);
        const taxable = gross - discountAmount;
        const total = taxable + (taxable * (cgst + sgst) / 100);

        row.querySelector('.discountAmount').value = discountAmount.toFixed(2);
        row.querySelector('.taxableAmount').value = taxable.toFixed(2);
        row.querySelector('.total').value = total.toFixed(2);

        calculateSummary();
    }

    function calculateSummary() {
        const rows = document.querySelectorAll('#tableBody tr');
        let totalDiscountAmount = 0, totalGross = 0, taxableAmount = 0, grandTotal = 0;

        rows.forEach(row => {
            const qty = parseFloat(row.querySelector('.Quantity').value) || 0;
            const price = parseFloat(row.querySelector('.SellingPrice').value) || 0;
            const discount = parseFloat(row.querySelector('.discountAmount').value) || 0;
            const total = parseFloat(row.querySelector('.total').value) || 0;

            totalGross += qty * price;
            totalDiscountAmount += discount;
            grandTotal += total;
        });

        taxableAmount = totalGross - totalDiscountAmount;

        document.getElementById('grandTotal').value = totalGross.toFixed(2);
        document.getElementById('totalDiscountAmount').value = totalDiscountAmount.toFixed(2);
        document.getElementById('totalDiscountPercent').value = taxableAmount.toFixed(2);
        document.getElementById('grossTotal').value = grandTotal.toFixed(2);
    }
</script>
 *@