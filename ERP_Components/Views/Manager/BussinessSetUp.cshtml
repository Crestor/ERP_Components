@using ERP_Component_DAL.Models;
@{
    ViewBag.Title = "Business SetUp";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
}

<link rel="stylesheet" href="~/css/Product.css" />
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<div class="container">
    <form asp-action="BussinessSetUpDetails" asp-controller="Manager" enctype="multipart/form-data">
        <!-- Basic Details -->
        <div class="section-toggle" data-target="BasicDetails">👤 Basic Details <i class="fas fa-chevron-down"></i></div>
        <div id="BasicDetails" class="form-section">
            <div class="form-row">
                <label class="required" for="BussinessName">Business Name</label>
                <input type="text" id="BussinessName" name="BussinessName" placeholder="BussinessName" required />
                <label class="required" for="Email">Email</label>
                <input type="email" id="Email" name="Email" placeholder="Email" required />
            </div>
            <div class="form-row">
                <label class="required" for="Mobile">Mobile</label>
                <input type="tel" id="Mobile" name="Mobile" required maxlength="10" placeholder="1234567890" pattern="[0-9]{10}" />
                <label class="required" for="AlternateMobile">Alternate Mobile</label>
                <input type="tel" id="AlternateMobile" name="AlternateMobile" maxlength="10" placeholder="1234567890" pattern="[0-9]{10}" />
            </div>
        </div>

        <!-- Address Details -->
        <div class="section-toggle" data-target="BillingDetails">🏘 Address Details <i class="fas fa-chevron-down"></i></div>
        <div id="BillingDetails" class="form-section">
            <div class="form-row">
                <label class="required" for="country">Country</label>
                <select id="country" name="Country"><option>India</option></select>

                <label class="required" for="state">State</label>
                <select id="state" name="State"></select>
            </div>
            <div class="form-row">
                <label class="required" for="district">District</label>
                <select id="district" name="District"></select>

                <label class="required" for="city">City</label>
                <select id="city" name="City" onchange="checkOtherCity(this)"></select>
            </div>
            <div class="form-row">
                <label class="required" for="pin">Pin Code</label>
                <input type="text" id="pin" name="PinCode" />
                <div id="pinError" style="color: red; font-size: 12px;"></div>

                <label class="required" for="address">Address</label>
                <input type="text" id="address" name="Address" />
            </div>
        </div>

        <!-- Tax Details -->
        <div class="section-toggle" data-target="ShippingDetails">📜 Tax Details <i class="fas fa-chevron-down"></i></div>
        <div id="ShippingDetails" class="form-section">
            <div class="form-row">
                <label class="required" for="gstin">GST No</label>
                <input type="text" id="gstin" name="GstIn" maxlength="15" placeholder="27AAAAA1234A1Z5" />
                <div id="gstinError" class="invalidinput"></div>

                <label class="required" for="panno">PAN No</label>
                <input type="text" id="panno" name="PAN" maxlength="10" placeholder="ABCDE1234F" />
                <div id="pannoError" class="invalidrightinput"></div>
            </div>
            <div class="form-row">
                <label class="required" for="CIN">CIN No</label>
                <input type="text" id="CIN" name="CIN" maxlength="21" placeholder="L12345MH2020PLC123456" />
                <div id="CINError" class="invalidinput"></div>

                <label class="required" for="TAN">TAN No</label>
                <input type="text" id="TAN" name="TAN" maxlength="10" placeholder="ABCD12345E" />
                <div id="TANError" class="invalidrightinput"></div>
            </div>
        </div>

        <!-- Buttons -->
        <div class="button">
            <button type="reset">Reset</button>
            <button type="submit">Submit</button>
        </div>
    </form>
</div>

<script>
    document.querySelectorAll('.section-toggle').forEach(toggle => {
        toggle.addEventListener('click', () => {
            const targetId = toggle.getAttribute('data-target');
            const targetSection = document.getElementById(targetId);
            document.querySelectorAll('.form-section').forEach(section => section.style.display = 'none');
            document.querySelectorAll('.section-toggle').forEach(header => header.classList.remove('active'));
            targetSection.style.display = 'block';
            toggle.classList.add('active');
        });
    });

    window.addEventListener('DOMContentLoaded', () => {
        const firstToggle = document.querySelector('.section-toggle');
        if (firstToggle) firstToggle.click();

        const fields = [
            {
                id: "gstin",
                pattern: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/,
                message: "Enter a valid GST No. (e.g., 27AAAAA1234A1Z5)"
            },
            {
                id: "panno",
                pattern: /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/,
                message: "Enter a valid PAN No. (e.g., ABCDE1234F)"
            },
            {
                id: "CIN",
                pattern: /^[A-Z]{1}[0-9]{5}[A-Z]{2}[0-9]{4}[A-Z]{3}[0-9]{6}$/,
                message: "CIN must be in format (e.g., L12345MH2020PLC123456)"
            },
            {
                id: "TAN",
                pattern: /^[A-Z]{4}[0-9]{5}[A-Z]{1}$/,
                message: "Enter a valid TAN No. (e.g., ABCD12345E)"
            },
            {
                id: "pin",
                pattern: /^\d{6}$/,
                message: "PIN Code must be 6 digits"
            }
        ];

        fields.forEach(({ id, pattern, message }) => {
            const input = document.getElementById(id);
            const errorDiv = document.getElementById(id + "Error");

            input.addEventListener("blur", () => {
                const value = input.value.trim().toUpperCase();
                input.value = value;
                errorDiv.textContent = value && !pattern.test(value) ? message : "";
            });
        });
    });
</script>

<!-- Location Data Script -->
<script>
    let locationData = null;

    // Load the JSON file
    async function loadLocationData() {
        const response = await fetch('/json/city.json'); 
        locationData = await response.json();
        populateStates();
    }

    // Populate state dropdown from JSON
    function populateStates() {
        const stateSelect = document.getElementById("state");
        stateSelect.innerHTML = '<option value="">-Select State-</option>';
        locationData.states.forEach(state => {
            const option = new Option(state.name, state.name);
            stateSelect.appendChild(option);
        });
    }

    // Populate districts based on selected state
    function updateDistricts() {
        const stateName = document.getElementById("state").value;
        const districtSelect = document.getElementById("district");
        const citySelect = document.getElementById("city");

        districtSelect.innerHTML = '<option value="">-Select District-</option>';
        citySelect.innerHTML = '<option value="">-Select City-</option>';

        const selectedState = locationData.states.find(s => s.name === stateName);
        if (selectedState) {
            selectedState.districts.forEach(district => {
                const option = new Option(district.name, district.name);
                districtSelect.appendChild(option);
            });
        }
    }

    // Populate cities based on selected district
    function updateCities() {
        const stateName = document.getElementById("state").value;
        const districtName = document.getElementById("district").value;
        const citySelect = document.getElementById("city");

        citySelect.innerHTML = '<option value="">-Select City-</option>';

        const selectedState = locationData.states.find(s => s.name === stateName);
        const selectedDistrict = selectedState?.districts.find(d => d.name === districtName);

        if (selectedDistrict) {
            selectedDistrict.cities.forEach(city => {
                const option = new Option(city, city);
                citySelect.appendChild(option);
            });
            citySelect.appendChild(new Option("Other", "other"));
        }
    }

    // Trigger manual input if 'Other' city selected
    async function checkOtherCity(select) {
        if (select.value === "other") {
            select.value = "";

            const { value: newCity } = await Swal.fire({
                title: "Enter your City",
                input: "text",
                inputPlaceholder: "Enter city name",
                showCancelButton: true,
                inputValidator: (value) => !value && "City name is required!"
            });

            if (newCity) {
                const option = new Option(newCity, newCity);
                select.add(option);
                select.value = newCity;
            }
        }
    }

    // Event bindings
    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("state").addEventListener("change", updateDistricts);
        document.getElementById("district").addEventListener("change", updateCities);
        loadLocationData();
    });
</script>
