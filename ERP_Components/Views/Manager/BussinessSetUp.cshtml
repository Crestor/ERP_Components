@using ERP_Component_DAL.Models
@model BusinessSetUp
@{
    ViewBag.Title = "Business SetUp";
    Layout = "~/Views/Shared/_LayoutINV.cshtml";
    var isReadOnly = Model != null && Model.CompanyID != Guid.Empty;
}

<link rel="stylesheet" href="~/css/Product.css" />
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container">
    <form asp-action="BussinessSetUpDetails" asp-controller="Manager" enctype="multipart/form-data">
        <div class="section-toggle" data-target="BasicDetails">👤 Basic Details <i class="fas fa-chevron-down"></i></div>
        <div id="BasicDetails" class="form-section">
            <div class="form-row">
                <label class="required" for="BussinessName">Business Name</label>
                <input type="text" id="BussinessName" name="BussinessName" placeholder="BussinessName" required value="@Model?.BussinessName" @(isReadOnly ? "readonly" : "") />

                <label class="required" for="Email">Email</label>
                <input type="email" id="Email" name="Email" placeholder="Email" required value="@Model?.Email" @(isReadOnly ? "readonly" : "") />
            </div>
            <div class="form-row">
                <label class="required" for="Mobile">Mobile</label>
                <input type="tel" id="Mobile" name="Mobile" required maxlength="10" placeholder="1234567890" pattern="[0-9]{10}" value="@Model?.Mobile" @(isReadOnly ? "readonly" : "") />

                <label class="required" for="AlternateMobile">Alternate Mobile</label>
                <input type="tel" id="AlternateMobile" name="AlternateMobile" maxlength="10" placeholder="1234567890" pattern="[0-9]{10}" value="@Model?.AlternateMobile" @(isReadOnly ? "readonly" : "") />
            </div>
        </div>

        <div class="section-toggle" data-target="BillingDetails">🏘 Address Details <i class="fas fa-chevron-down"></i></div>
        <div id="BillingDetails" class="form-section">
            <div class="form-row">
                <label class="required" for="country">Country</label>
                <select id="country" name="Address.Country" @(isReadOnly ? "disabled" : "")>
                    <option value="India" selected>India</option>
                </select>

                <label class="required" for="state">State</label>
                <select id="state" name="Address.State" @(isReadOnly ? "disabled" : "")></select>
            </div>
            <div class="form-row">
                <label class="required" for="district">District</label>
                <select id="district" name="Address.District" @(isReadOnly ? "disabled" : "")></select>

                <label class="required" for="city">City</label>
                <select id="city" name="Address.City" onchange="checkOtherCity(this)" @(isReadOnly ? "disabled" : "")></select>
            </div>
            <div class="form-row">
                <label class="required" for="pin">Pin Code</label>
                <input type="text" id="pin" name="Address.Pincode" value="@Model?.address?.Pincode" @(isReadOnly ? "readonly" : "") />
                <div id="pinError" style="color: red; font-size: 12px;"></div>

                <label class="required" for="address">Address</label>
                <input type="text" id="address" name="Address.AddressLine1" value="@Model?.address?.AddressLine1" @(isReadOnly ? "readonly" : "") />
            </div>
        </div>

        <div class="section-toggle" data-target="ShippingDetails">📜 Tax Details <i class="fas fa-chevron-down"></i></div>
        <div id="ShippingDetails" class="form-section">
            <div class="form-row">
                <label class="required" for="gstin">GST No</label>
                <input type="text" id="gstin" name="GstIn" maxlength="15" placeholder="27AAAAA1234A1Z5" value="@Model?.GstIn" @(isReadOnly ? "readonly" : "") />
                <div id="gstinError" class="invalidinput"></div>

                <label class="required" for="panno">PAN No</label>
                <input type="text" id="panno" name="PAN" maxlength="10" placeholder="ABCDE1234F" value="@Model?.PAN" @(isReadOnly ? "readonly" : "") />
                <div id="pannoError" class="invalidrightinput"></div>
            </div>
            <div class="form-row">
                <label class="required" for="CIN">CIN No</label>
                <input type="text" id="CIN" name="CIN" maxlength="21" placeholder="L12345MH2020PLC123456" value="@Model?.CIN" @(isReadOnly ? "readonly" : "") />
                <div id="CINError" class="invalidinput"></div>

                <label class="required" for="TAN">TAN No</label>
                <input type="text" id="TAN" name="TAN" maxlength="10" placeholder="ABCD12345E" value="@Model?.TAN" @(isReadOnly ? "readonly" : "") />
                <div id="TANError" class="invalidrightinput"></div>
            </div>
        </div>

        <div class="button">
            <button type="reset">Reset</button>
            @if (isReadOnly)
            {
                <button type="button" id="editButton"><i class="fas fa-pencil-alt"></i> Edit</button>
            }
            <button type="submit">Submit</button>
        </div>
    </form>
</div>

<script>
    document.querySelectorAll('.section-toggle').forEach(toggle => {
        toggle.addEventListener('click', () => {
            const targetId = toggle.getAttribute('data-target');
            const targetSection = document.getElementById(targetId);
            document.querySelectorAll('.form-section').forEach(section => section.style.display = 'none');
            document.querySelectorAll('.section-toggle').forEach(header => header.classList.remove('active'));
            targetSection.style.display = 'block';
            toggle.classList.add('active');
        });
    });
    window.addEventListener('DOMContentLoaded', () => {
        const firstToggle = document.querySelector('.section-toggle');
        if (firstToggle) firstToggle.click();
    });

    document.addEventListener("DOMContentLoaded", function () {
        const editButton = document.getElementById('editButton');
        if (editButton) {
            editButton.addEventListener('click', function () {
                document.querySelectorAll('input, select').forEach(el => {
                    el.removeAttribute('readonly');
                    el.removeAttribute('disabled');
                });
                this.style.display = 'none';
                document.getElementById('BussinessName').focus();
            });
        }
    });
</script>

<script>
    let locationData = null;

    async function loadLocationData() {
        const response = await fetch('/json/city.json');
        locationData = await response.json();
        populateStates();
        setInitialLocationValues();
    }

    function populateStates() {
        const stateSelect = document.getElementById("state");
        stateSelect.innerHTML = '<option value="">-Select State-</option>';
        locationData.states.forEach(state => {
            const option = new Option(state.name, state.name);
            stateSelect.appendChild(option);
        });
    }

    function updateDistricts() {
        const stateName = document.getElementById("state").value;
        const districtSelect = document.getElementById("district");
        const citySelect = document.getElementById("city");
        districtSelect.innerHTML = '<option value="">-Select District-</option>';
        citySelect.innerHTML = '<option value="">-Select City-</option>';
        const selectedState = locationData.states.find(s => s.name === stateName);
        if (selectedState) {
            selectedState.districts.forEach(district => {
                const option = new Option(district.name, district.name);
                districtSelect.appendChild(option);
            });
        }
    }

    function updateCities() {
        const stateName = document.getElementById("state").value;
        const districtName = document.getElementById("district").value;
        const citySelect = document.getElementById("city");
        citySelect.innerHTML = '<option value="">-Select City-</option>';
        const selectedState = locationData.states.find(s => s.name === stateName);
        const selectedDistrict = selectedState?.districts.find(d => d.name === districtName);
        if (selectedDistrict) {
            selectedDistrict.cities.forEach(city => {
                const option = new Option(city, city);
                citySelect.appendChild(option);
            });
            citySelect.appendChild(new Option("Other", "other"));
        }
    }

    function setInitialLocationValues() {
        const modelState = "@Model?.address?.State";
        const modelDistrict = "@Model?.address?.District";
        const modelCity = "@Model?.address?.City";

        if (modelState) {
            const stateSelect = document.getElementById('state');
            stateSelect.value = modelState;
            updateDistricts();

            if (modelDistrict) {
                const districtSelect = document.getElementById('district');
                districtSelect.value = modelDistrict;
                updateCities();

                if (modelCity) {
                    const citySelect = document.getElementById('city');
                    if ([...citySelect.options].some(opt => opt.value === modelCity)) {
                        citySelect.value = modelCity;
                    } else {
                        const newOption = new Option(modelCity, modelCity, true, true);
                        const otherOption = citySelect.querySelector('option[value="other"]');
                        citySelect.add(newOption, otherOption);
                        citySelect.value = modelCity;
                    }
                }
            }
        }
    }

    async function checkOtherCity(select) {
        if (select.value === "other") {
            select.value = "";
            const { value: newCity } = await Swal.fire({
                title: "Enter your City", input: "text", inputPlaceholder: "Enter city name",
                showCancelButton: true, inputValidator: (value) => !value && "City name is required!"
            });
            if (newCity) {
                const option = new Option(newCity, newCity);
                select.add(option);
                select.value = newCity;
            }
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("state").addEventListener("change", updateDistricts);
        document.getElementById("district").addEventListener("change", updateCities);
        loadLocationData();
    });
</script>
